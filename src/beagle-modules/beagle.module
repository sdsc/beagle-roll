#%Module1.0
set compiler "nocompiler"
set mpi "nompi"
set network "nonetwork"
if {[module-info mode switch1] || [module-info mode switch3]} {
  set commandWords [split [exec /bin/ps -p [pid] -o args=] " "]
  set switchFrom [lindex [split [module-info name] "/"] 0]
  set switchTo [lindex [split [lindex $commandWords end] "/"] 0]
  set loadApps [expr  [string equal $switchTo $switchFrom]]
} elseif {[module-info mode remove]} {
  set loadApps 0
} elseif {[module-info mode display]} {
  set loadApps 0
} else {
   set loadApps 1
}
if { $loadApps  }  {
 if {[info exists env(LOADEDMODULES)]} {
  foreach app [split $env(LOADEDMODULES) ":"] {
     if { [ string match "*intel*" $app ] == 1 } {
          set compiler "intel"
     } elseif { [ string match "*pgi*" $app ] == 1 } {
          set compiler "pgi"
     } elseif { [ string match "*gnu*" $app ] == 1 && [ string match *gnubase* $app ] == 0 } {
          set compiler "gnu"
     }
     if { [ string match "*mvapich2*" $app ] == 1 } {
          set mpi "mvapich2"
     } elseif { [ string match "*openmpi*" $app ] == 1 } {
          set mpi "openmpi"
     } elseif { [ string match "*mpich2*" $app ] == 1 } {
          set mpi "mpich2"
     }
     if { [ string match "*_ib*" $app ] == 1 } {
          set network "ib"
     } elseif { [ string match "*_mx*" $app ] == 1 } {
          set network "mx"
     } elseif { [ string match "*_eth*" $app ] == 1 } {
          set network "eth"
     }
  }
 }

  if { [ string equal "nocompiler" $compiler ] ==  1 }  {
      module load ROLLCOMPILER
      puts stderr "loading ROLLCOMPILER module"
  } elseif { [ string equal "ROLLCOMPILER" $compiler ] == 0 } {
      module unload $compiler
      module load ROLLCOMPILER
      puts stderr "loading ROLLCOMPILER module"
      if { [ string equal "nompi" $mpi ] ==  0  && [ string equal "nonetwork" $network ] == 0} {
       module load ${mpi}_${network}
       puts stderr "loading ${mpi}_${network} module"
     }
  }
}

proc ModulesHelp { } {
        global version

        puts stderr "   Loads ${PACKAGE}"
        puts stderr "   Version \$version"
}


module-whatis "beagle"
module-whatis "Version: VERSION"
module-whatis "Description: beagle"
module-whatis "Compiler: intel"
set beaglehome /opt/beagle/VERSION
setenv BEAGLE $beaglehome
setenv BEAGLE_HOME $beaglehome
setenv BEAGLE_LIB $beaglehome/lib
prepend-path LD_LIBRARY_PATH $beaglehome/lib
prepend-path LIBPATH $beaglehome/lib
